# Alpine + GLIBC base image
#
# This is somewhat iffy...the NSO installer completes, but complains about missing libraries.
# I think it's looking in the wrong place in the MUSL + GLIBC base. Regardless, NSO itself
# seems to work...
#
# Note 'su' here doesn't support the whitelist-environment for OAUTH_TOKEN & GIT_USERNAME
FROM frolvlad/alpine-glibc

ARG nso_ver=5.4.2
ARG file_server=0.0.0.0:48888
ARG docker_cli=true

# install_dir has to be absolute (used in sed edit below)
ARG install_dir=/pkgs

LABEL org.opencontainers.image.title="Cisco-NSO" \
      org.opencontainers.image.description="Cisco NSO testing" \
      org.opencontainers.image.vendor="Cisco Systems" \
      org.opencontainers.image.created="${build_date}" \
      org.opencontainers.image.url="unspecified"

WORKDIR ${install_dir}
EXPOSE 2022/tcp 2024/tcp 8080/tcp

# Note apache-ant currently appears to depend on OpenJDK 8, so this ends up with
# two OpenJDK versions. Should it just drop back to OpenJDK 8?

RUN echo "======== Updating base OS" && \
    apk update && apk upgrade && \
    \
    echo "======== Installing utilities, Java, Python" && \
    apk add --no-cache wget bash openssh-client openssh-keygen file && \
    apk add --no-cache openjdk11-jre-headless python3 python3-dev && \
    if [ ! -e /usr/bin/python ]; then ln -sf python3 /usr/bin/python ; fi && \
    \
    echo "======== Installing build tools for NSO packages" && \
    apk add --no-cache sudo vim git make libxml2-dev libxslt-dev apache-ant musl-dev gcc && \
    \
    if [ ! -e /tmp/requirements.txt ]; then \
      echo "======== Fetching local files" ; \
      wget -q --no-proxy http://${file_server}/requirements.txt -O /tmp/requirements.txt ; \
      mkdir .ssh ; \
      wget -q --no-proxy http://${file_server}/ssh-config -O ./.ssh/config ; \
      wget -q --no-proxy http://${file_server}/git-credential-helper.sh -O ./.git-credential-helper.sh ; \
      wget -q --no-proxy http://${file_server}/gitconfig -O ./.gitconfig ; \
      wget -q --no-proxy http://${file_server}/nso-${nso_ver}.linux.x86_64.installer.bin -O /tmp/nso-${nso_ver}.linux.x86_64.installer.bin ; \
    fi && \
    \
    echo "======== Installing pip and requirements" && \
    python3 -m ensurepip && \
    rm -r /usr/lib/python*/ensurepip && \
    pip3 install --no-cache --upgrade pip setuptools wheel && \
    if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
    pip install -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt && \
    \
    echo "======== Installing NSO ${nso_ver}" && \
    sh /tmp/nso-${nso_ver}.linux.x86_64.installer.bin ${install_dir}/nso-install --local-install && \
    # Normally these keys should be RW only for user, but may need R for group/other in Jenkins pipeline with potentially random user
    chmod 0644 ${install_dir}/nso-install/netsim/confd/etc/confd/ssh/ssh_host_rsa_key && \
    chmod 0644 ${install_dir}/nso-install/etc/ncs/ssh/ssh_host_ed25519_key && \
    rm /tmp/nso-${nso_ver}.linux.x86_64.installer.bin && \
    \
    echo "======== Creating local ncsadmin user" && \
    adduser -h ${install_dir} -s /bin/bash -H -D ncsadmin && \
    echo "ncsadmin ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/ncsadmin && \
    chmod 0440 /etc/sudoers.d/ncsadmin && \
    echo "PATH=/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> .profile && \
    printf "if [ -f ~/.bashrc ]; then\n  . ~/.bashrc\nfi\n" >> .profile && \
    echo "source ${install_dir}/nso-install/ncsrc" >> .bashrc && \
    # echo 'export NCS_JAVA_VM_OPTIONS="-Xmx1G -Xms512M"' >> .bashrc && \
    chown -R ncsadmin:ncsadmin ${install_dir} && \
    \
    echo "======== Finishing up" && \
    sed -i'' "s/INSTALL_DIR/\\${install_dir}/" .gitconfig

CMD ["su", "-", "ncsadmin"]